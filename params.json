{"name":"Word2vec-fork","tagline":"Extensions to Tomas's word2vec","body":"# Extensions to Tomas's word2vec\r\nThis project makes some extension to the [word2vec tool](http://code.google.com/p/word2vec/).\r\n\r\n## Binary Tree for HS using word embedding info\r\nRebuild the binary tree every several iterations, using the temporary word embedding vectors.\r\nGet better performance than the original HS, with a little overhead of speed.\r\n\r\n### Benchmark\r\nTests running on a 12-core CPU, parameters are all the same in the original scripts, except the '-threads' is set to 12. Baselines are using the original word2vec tool.\r\n\r\n#### Word accuracy\r\nUsing command:\r\n```\r\n./word2vec -train text8 -output vectors.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 12 -binary 1 -iter 15\r\n./compute-accuracy vectors.bin 30000 < questions-words.txt\r\n```\r\n\r\n             | Total accuracy(%) | Semantic accuracy(%) | Syntactic accuracy(%) | Speed(kwords/s) \r\n------------ | ------------------|----------------------|-----------------------|-----------------\r\nNeg-25       | 52.74             | 57.35                | 50.42                 | 98.49 \r\nNeg-5        | 45.22             | 43.04                | 46.31                 | 322.00\r\nHS           | 34.39             | 35.22                | 33.97                 | 186.09\r\nHS-rebuild   | 42.97             | 47.67                | 40.60                 | 184.90\r\n\r\n#### Phrase accuracy\r\nUsing command:\r\n```\r\n./word2vec -train news.2012.en.shuffled-norm1-phrase1 -output vectors-phrase.bin -cbow 1 -size 200 -window 10 -negative 25 -hs 0 -sample 1e-5 -threads 12 -binary 1 -iter 15\r\n./compute-accuracy vectors-phrase.bin < questions-phrases.txt\r\n```\r\n\r\n\r\n             | Accuracy(%) | Speed(kwords/s) \r\n------------ | ------------|-----------------\r\nNeg-25       | 35.42       | 139.99 \r\nNeg-5        | 23.45       | 453.07\r\nHS           | 12.80       | 244.34\r\nHS-rebuild   | 24.88       | 224.48\r\n\r\n### Todo\r\nPerformance is still worse than NEG mothod. Consider a way to allow multiple codes per word(like [this paper](https://www.cs.toronto.edu/~amnih/papers/hlbl_final.pdf), which may improve the performance.","google":"UA-58316654-1","note":"Don't delete this file! It's used internally to help with page regeneration."}